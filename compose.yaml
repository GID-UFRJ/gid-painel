services:
  gid-painel:
    image: gavieira/gid-painel:latest
    environment:
      # Variáveis da Aplicação Django (lidas do .env)
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_PORT=${DJANGO_PORT}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS}
      - DJANGO_STATIC_ROOT=${DJANGO_STATIC_ROOT}
      # Variáveis do Banco de Dados PostgreSQL (lidas do .env)
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      # Certifique-se de que o diretório de arquivos estáticos esteja montado
      # para o Caddy poder servi-los diretamente.
      - static_volume:${DJANGO_STATIC_ROOT} # Agora usa a variável do .env
      - ./importar:/app/importar
      - .:/app #acrescentado posteriormente.
      - ./dump:/app/dump #também acrescentei
    depends_on:
      postgres:
        condition: service_healthy # Espera o DB estar saudável
    restart: "on-failure" # Adicione para garantir que o serviço reinicie se cair

  postgres:
    image: postgres:17.5
    environment:
      # Credenciais do PostgreSQL (lidas do .env)
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB} # A imagem Postgres usa POSTGRES_DB, que vem de POSTGRES_DB do .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: "on-failure"

  init-db:
    # Inicializa a db, criando tabelas e fazendo população inicial dos dados
    # Idealmente, deve ser executado usando 'docker compose run --rm init-db'
    # Executado assim, ele é removido assim que faz a população, evitando problemas com containers parados e volumes montados
    # Comando para deploy e população: 'docker compose up -d && docker compose run --rm init-db'
    image: gavieira/gid-painel:latest
    command: sh -c "set -e; python manage.py migrate --no-input \
                      && python manage.py collectstatic --no-input \
                      && python manage.py importar_programas \
                      && python manage.py importar_rankings \
                      && python manage.py createsuperuser --noinput \
                      --username $DJANGO_SUPERUSER_USERNAME \
                      --email $DJANGO_SUPERUSER_EMAIL"

    volumes:
      - ./importar:/app/importar # Montando dir do host com dados de população inicial da db
      - static_volume:${DJANGO_STATIC_ROOT} # Se o collectstatic for executado, o volume static_volume precisa estar visível aqui também
    environment:
      # Variáveis para o Django nas migrações/coleta estática (lidas do .env)
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_STATIC_ROOT=${DJANGO_STATIC_ROOT}
      # Variáveis do Banco de Dados PostgreSQL (lidas do .env)
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["setup"]

  caddy:
    image: caddy:2.7.6-alpine
    ports:
      - "8000:80"   # HTTP
      - "8443:443" # HTTPS
      - "8443:443/udp" # QUIC (opcional, mas recomendado)
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile # Mapeia Caddyfile do host
      - caddy_data:/data                     # Volume para dados persistentes do Caddy (certificados SSL)
      - static_volume:${DJANGO_STATIC_ROOT} # Monta o mesmo volume de arquivos estáticos
    environment:
      # Variáveis do Caddy (lidas do .env)
      - CADDY_DOMAIN=${CADDY_DOMAIN}
      - CADDY_EMAIL=${CADDY_EMAIL}
      # Referência ao serviço Django (hardcoded, pois é um nome de serviço interno)
      - DJANGO_HOST=gid-painel
      - DJANGO_PORT=${DJANGO_PORT} # Porta que o Gunicorn está usando dentro do contêiner Django
    depends_on:
      gid-painel:
        condition: service_started # Caddy precisa que o Django esteja rodando
    restart: "unless-stopped" # Reinicia sempre, a menos que seja parado explicitamente

volumes:
  static_volume:
  postgres_data:
  caddy_data:
